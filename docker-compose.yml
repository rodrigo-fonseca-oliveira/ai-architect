version: '3.8'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        TORCH_VARIANT: ${TORCH_VARIANT:-cpu}
    container_name: ai-monitor-api
    env_file:
      - .env
    environment:
      - APP_ENV=production
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      - REQUEST_ID_HEADER=X-Request-ID
      - EMBEDDINGS_PROVIDER=stub
      - VECTORSTORE_PATH=/data/vectorstore
      - DOCS_PATH=/app/docs
      - PROJECT_GUIDE_ENABLED=true
      - DB_URL=sqlite:////data/audit.db
      # Optional: protect /metrics with a token. If unset or empty, /metrics is open.
      # Set a strong value in production and configure Prometheus to send X-Metrics-Token header.
      - METRICS_TOKEN=${METRICS_TOKEN:-}
      # Forward OPENAI_API_KEY from host env at runtime (do not store in .env inside image)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - ./examples:/app/examples:ro
      - ./docs:/app/docs:ro
      - ./data:/data

  prometheus:
    image: prom/prometheus:latest
    container_name: ai-monitor-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    container_name: ai-monitor-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro

volumes:
  grafana-data:
